{"version":3,"sources":["webpack:///./src/components/DataManager/DataManager.yaml","webpack:///./src/components/DataManager/DataManager.html?e044","webpack:///./src/components/DataManager/DataManager.html","webpack:///./src/components/DataManager/DataManager.js","webpack:///./src/components/DataManager/DataManager.js?ce9c","webpack:///./src/components/DataManager/DataManager.vue","webpack:///./src/components/DataManager/DataManager.yaml?ae4f","webpack:///./src/components/DataManager/DataManagerMethodsBackup.js","webpack:///./src/components/DataManager/DataManagerMethodsBackupSheet.js","webpack:///./src/components/DataManager/DataManagerMethodsRemote.js","webpack:///./src/components/DataManager/DataManagerMethodsRestore.js","webpack:///./src/components/DataManager/DataManagerMethodsRestoreSheet.js","webpack:///fs (ignored)","webpack:///crypto (ignored)","webpack:///stream (ignored)"],"names":[],"mappings":"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AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,eAAe,2CAAI;;AAEnB;AACA;AACA,IAAI,2CAAI;;AAER;;AAEA,C;;;;;;;;;;;;AC1EA;AAAA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,aAAa;;AAErD;AACA;;AAEA;AACA,KAAK;AACL;AACA,C;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AACA;;AAEyB;;AAEV;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB,4CAAK;AACzB;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;;AAER;AACA,C;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAuB;;AAER;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAAI,aAAa,cAAc;AACtD;AACA;AACA;AACA,KAAK;AACL,G;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA,mBAAmB,2CAAI;;AAEvB;;AAEA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;AC7HA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e","file":"components/DataManager.js","sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en\":{\"TEST_MESSAGE\":\"Test Message\"},\"zh-TW\":{\"TEST_MESSAGE\":\"測試訊息\"}}')\n  delete Component.options._Ctor\n}\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"span\", { staticClass: \"DataManager\" })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","export * from \"-!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./DataManager.html?vue&type=template&id=6e6a6f97&\"","let app = {\r\n  props: ['db'],\r\n  components: {\r\n    // DataTaskManager: () => import(/* webpackChunkName: \"components/DataTaskManager\" */ './DataTaskManager/DataTaskManager.vue')\r\n  },\r\n  data () {    \r\n    this.$i18n.locale = this.db.localConfig.locale\r\n    return {\r\n      timeFields: [\r\n        'dueTime',\r\n        'createTime',\r\n        'modifiedTime'\r\n      ],\r\n      arrayJSONAttributes: [\r\n        'tasks'\r\n      ],\r\n      booleanFields: [\r\n        'dueTime',\r\n        'isCompleted', \r\n        'isPinned'\r\n      ],\r\n      arrayFields: [\r\n        'files'\r\n      ],\r\n      arrayValueSplitor: ';'\r\n    }\r\n  },\r\n  watch: {\r\n    'db.localConfig.locale'() {\r\n      this.$i18n.locale = this.db.localConfig.locale;\r\n    },\r\n  },\r\n  // computed: {\r\n  // },\r\n  mounted() {\r\n    this.initData()\r\n\r\n    // this.testBackup20221227()\r\n  },\r\n  methods: {\r\n    initData () {\r\n      this.db.data = {\r\n        backup: () => {\r\n          this.backup()\r\n        },\r\n        backupCompleted: () => {\r\n          this.backupCompleted()\r\n        },\r\n        restore: (file) => {\r\n          this.restore(file)\r\n        },\r\n        reset: () => {\r\n          this.reset()\r\n        }\r\n      }\r\n    },\r\n    reset: async function () {\r\n      // console.log('reset')\r\n      this.arrayJSONAttributes.forEach(field => {\r\n        this.db.localConfig[field] = this.db.localConfig[field].slice(0,0)\r\n        // console.log(this.db.localConfig[field])\r\n      })\r\n      this.db.config.view = 'todo'\r\n      this.db.config.showConfigurations = false\r\n\r\n      await this.db.utils.FileSystemUtils.reset()\r\n    }\r\n  }\r\n}\r\n\r\nimport DataManagerMethodsRemote from './DataManagerMethodsRemote.js'\r\nDataManagerMethodsRemote(app)\r\n\r\nimport DataManagerMethodsBackup from './DataManagerMethodsBackup.js'\r\nDataManagerMethodsBackup(app)\r\n\r\nimport DataManagerMethodsBackupSheet from './DataManagerMethodsBackupSheet.js'\r\nDataManagerMethodsBackupSheet(app)\r\n\r\nimport DataManagerMethodsRestore from './DataManagerMethodsRestore.js'\r\nDataManagerMethodsRestore(app)\r\n\r\nimport DataManagerMethodsRestoreSheet from './DataManagerMethodsRestoreSheet.js'\r\nDataManagerMethodsRestoreSheet(app)\r\n\r\nexport default app","import mod from \"-!./DataManager.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!./DataManager.js?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DataManager.html?vue&type=template&id=6e6a6f97&\"\nimport script from \"./DataManager.js?vue&type=script&lang=js&\"\nexport * from \"./DataManager.js?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./DataManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataManager%2FDataManager.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/app/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6e6a6f97')) {\n      api.createRecord('6e6a6f97', component.options)\n    } else {\n      api.reload('6e6a6f97', component.options)\n    }\n    module.hot.accept(\"./DataManager.html?vue&type=template&id=6e6a6f97&\", function () {\n      api.rerender('6e6a6f97', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/DataManager/DataManager.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DataManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataManager%2FDataManager.vue&lang=yaml\"; export default mod; export * from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DataManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataManager%2FDataManager.vue&lang=yaml\"","// Convertor\n// https://docs.google.com/spreadsheets/d/1Dt-nmoDnIny1MPqQ_4Za8CV0OpCBal4dnHxsBkbpEp4/edit?usp=sharing\n\nimport XLSX from 'xlsx'\nimport dayjs from 'dayjs'\n\nimport JSZip from 'jszip'\nimport { saveAs } from 'file-saver';\n\nexport default function (app) {\n\n  app.methods.testBackup20221227 = async function () {\n    const zip = new JSZip();\n\n    zip.file(\"Hello.txt\", \"Hello World\\n\");\n\n    const img = zip.folder(\"images\")\n    img.file(\"smile.gif\", await this.fetchData('./dist/asset/favicon.png'), {base64: true});\n\n    let content = await zip.generateAsync({type:\"blob\"})\n    saveAs(content, \"example.zip\")\n  }\n\n  app.methods.fetchData = async function (url) {\n    let res = await fetch(url)\n    return res.blob()\n  } \n\n  app.methods.backup = async function () {\n    // A workbook is the name given to an Excel file\n    var wb = XLSX.utils.book_new() // make Workbook of Excel\n\n    // ---------------------\n\n    let configJSON = {}\n    Object.keys(this.db.localConfig).forEach(key => {\n      if (this.arrayJSONAttributes.indexOf(key) > -1) {\n        return false\n      }\n      configJSON[key] = this.db.localConfig[key]\n    })\n    this.appendConfiguration(wb, configJSON)\n    // ------------------\n\n    let arrayJSONfield = 'tasks'\n    let tasks = JSON.parse(JSON.stringify(this.db.localConfig[arrayJSONfield]))\n    this.appendArrayJSON(wb, arrayJSONfield, tasks)\n\n    // console.log(tasks)\n    // console.log(this.db.localConfig[arrayJSONfield])\n    // export Excel file\n    \n    // ------------------\n\n    let filename = this.db.config.appNameID + '_' + dayjs().format('MMDD-HHmm') + '.ods' \n    \n    if (this.backupHasFiles(tasks) === false) {\n      XLSX.writeFile(wb, filename, {type: 'file', bookType: 'ods', compression: true}) // name of the file is 'book.xlsx'\n    }\n    else {\n      const zip = new JSZip();\n\n      // XLSX.writeFile(wb, filename, {type: 'file', bookType: 'ods', compression: true}) // name of the file is 'book.xlsx'\n      let sheetBase64 = XLSX.write(wb, {type: 'base64', bookType: 'ods', compression: true}) // name of the file is 'book.xlsx'\n      // zip.file(\"Hello.txt\", \"Hello World\\n\");\n      zip.file(filename, sheetBase64, {base64: true});\n\n      await this.backupFiles(zip, this.db.localConfig[arrayJSONfield])\n\n      let content = await zip.generateAsync({type:\"blob\"})\n      saveAs(content, \"example.zip\")\n    }\n      \n  }\n\n  app.methods.backupHasFiles = function (tasks) {\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks[i].files.length > 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  app.methods.getTaskBackupFilePath = function (task) {\n    let title = task.title.trim()\n\n    if (title.length > 20) {\n      title = title.slice(0, 20).trim()\n    }\n\n    return task.id + ' - ' + title\n  }\n\n  app.methods.backupFiles = async function (zip, tasks) {\n    const rootFolder = zip.folder(this.db.config.appNameID) // 先建立資料夾\n\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i]\n      let files = task.files\n\n      if (files.length === 0) {\n        continue\n      }\n\n      // 建立資料夾\n      let taskFolder = rootFolder.folder(this.getTaskBackupFilePath(task))\n      \n      for (let j = 0; j < files.length; j++) {\n        let file = files[j]\n        let filePath = task.id + '/' + file\n        // let fileSystemURL = this.db.utils.FileSystemUtils.getFileSystemUrl(filePath)\n\n        try {\n          // console.log(fileSystemURL)\n          // let base64 = await this.fetchData(fileSystemURL)\n          let base64 = await this.db.utils.FileSystemUtils.readBase64(filePath)\n          taskFolder.file(file, base64, {base64: true})\n        }\n        catch (e) {\n          console.error(e)\n        }\n      }\n    }\n  }\n\n  app.methods.backupCompleted = async function () {\n    // A workbook is the name given to an Excel file\n    var wb = XLSX.utils.book_new() // make Workbook of Excel\n\n    // ---------------------\n\n    let configJSON = {}\n    Object.keys(this.db.localConfig).forEach(key => {\n      if (this.arrayJSONAttributes.indexOf(key) > -1) {\n        return false\n      }\n      configJSON[key] = this.db.localConfig[key]\n    })\n    this.appendConfiguration(wb, configJSON)\n    // ------------------\n\n    let arrayJSONfield = 'tasks'\n    let tasks = this.db.localConfig[arrayJSONfield]\n    tasks = tasks.filter(task => task.isCompleted)\n    this.appendArrayJSON(wb, arrayJSONfield, tasks)\n    // export Excel file\n    \n    // ------------------\n\n    let filename = this.db.config.appNameID + '-completed-' + dayjs().format('MMDD-HHmm') + '.ods' \n    XLSX.writeFile(wb, filename, {type: 'file', bookType: 'ods', compression: true}) // name of the file is 'book.xlsx'\n\n    // ------------------\n\n    this.db.localConfig.tasks = this.db.localConfig.tasks.filter(task => !task.isCompleted)\n  }\n}","//import MLR from \"ml-regression-multivariate-linear\"\n\nimport XLSX from 'xlsx'\n\nexport default function (app) {\n\n  app.methods.appendConfiguration = function (wb, configJSON) {\n    \n    XLSX.utils.book_append_sheet(wb, this.buildAOAData(configJSON), 'configuration') // sheetAName is name of Worksheet\n  }\n\n  app.methods.buildAOAData = function (json) {\n    let aoa = Object.keys(json).map(key => {\n      return [key, json[key]]\n    })\n\n    // XLSX.utils.sheet_add_aoa(wb, configAOA, { origin: \"configuration\" });\n    let data = XLSX.utils.aoa_to_sheet(aoa)     \n\n    return data\n  }\n\n\n  app.methods.appendArrayJSON = function (wb, field, arrayJSON) {\n\n    arrayJSON = arrayJSON.map(task => {\n      for (let i = 0; i < this.timeFields.length; i++) {\n        // if (!task[this.timeFields[i]]) {\n        //   continue\n        // }\n        let value = task[this.timeFields[i]]\n        // console.log(value, typeof(value))\n        if (value !== false) {\n          task[this.timeFields[i]] = new Date(value).toUTCString()\n        }\n        else {\n          task[this.timeFields[i]] = ''\n        }\n      }\n\n      let keys = Object.keys(task)\n      for (let i = 0; i < keys.length; i++) {\n        let key = keys[i]\n        let value = task[key]\n\n        if (this.timeFields.indexOf(key) > -1) {\n          if (value !== false) {\n            task[key] = new Date(value).toUTCString()\n          }\n          else {\n            task[key] = ''\n          }\n        }\n\n        if (Array.isArray(value)) {\n          task[key] = value.join(this.arrayValueSplitor)\n        }\n      }\n\n      return task\n    })\n\n    // console.log(arrayJSON)\n\n    // export json to Worksheet of Excel\n    // only array possible\n    var data = XLSX.utils.json_to_sheet(arrayJSON) \n\n    // add Worksheet to Workbook\n    // Workbook contains one or more worksheets\n    XLSX.utils.book_append_sheet(wb, data, field) // sheetAName is name of Worksheet\n    \n  }\n\n}","// Convertor\n// https://docs.google.com/spreadsheets/d/1Dt-nmoDnIny1MPqQ_4Za8CV0OpCBal4dnHxsBkbpEp4/edit?usp=sharing\n\nexport default function (app) {\n  app.methods.loadURLODS = function (url) {\n\n    return new Promise((resolve) => {\n      /* set up async GET request */\n      var req = new XMLHttpRequest();\n      req.open(\"GET\", url, true);\n      req.responseType = \"arraybuffer\";\n\n      req.onload = async (e) => {\n        var data = new Uint8Array(req.response);\n        var workbook = XLSX.read(data, {type:\"array\"});\n\n        resolve(await this.processXLSXData(workbook))\n      }\n\n      req.send();\n    })\n  }\n}","// Convertor\n// https://docs.google.com/spreadsheets/d/1Dt-nmoDnIny1MPqQ_4Za8CV0OpCBal4dnHxsBkbpEp4/edit?usp=sharing\n\nimport JSZip from 'jszip'\n\nexport default function (app) {\n\n  app.methods.restore = async function (event) {\n    //console.log(1);\n    if (!window.FileReader) {\n      console.error(this.$t('Browser is not compatible'))\n      return false // Browser is not compatible\n    }\n\n    //var reader = new FileReader();\n\n    let file = event.target.files[0]\n\n    let filename = file.name\n      \n    // this.config.loadingProgress = 0\n     \n    // let data\n    // if (filename.endsWith('.csv')) {\n    //   rawData = await this.loadFileCSV(file)\n    // }\n    if (filename.endsWith('.ods')) {\n      await this.restoreFromODS(file)\n    }\n    else if (filename.endsWith('.zip')) {\n      await this.restoreFromZIP(file)\n    }\n      \n    this.db.config.showConfiguration = false\n    event.target.value = ''\n  }\n\n  app.methods.restoreFromODS = async function (file) {\n    let workbook = await this.loadFileODS(file)\n    let data = await this.parsingWorkbookToJSON(workbook)\n    // resolve(await this.processXLSXData(workbook))\n\n    // console.log(data)\n    if (!data) {\n      return false\n    }\n\n    // await this.processRawData(rawData)\n    // this.db.localConfig.tasks = \n    this.arrayJSONAttributes.forEach(field => {\n      // console.log(field)\n      this.db.localConfig[field] = this.db.localConfig[field].splice(0,0).concat(data[field])\n      // console.log(this.db.localConfig[field])\n    })\n    Object.keys(data.configuration).forEach(key => {\n      this.db.localConfig[key] = data.configuration[key]\n    })\n  }\n\n  app.methods.restoreFromZIP = async function (file) {\n    let zip = await JSZip.loadAsync(file)\n    let files = Object.keys(zip.files)\n    for (let i = 0; i < files.length; i++) {\n      let filepath = files[i]\n\n      // console.log(filename)\n      let file = await zip.files[filepath].async('blob')\n      if (filepath.endsWith('/')) {\n        continue\n      }\n      else if (filepath.indexOf('/') === -1) {\n        // 設定檔\n        await this.restoreFromODS(file)\n        // console.log(this.db.localConfig.tasks)\n      }\n      else {\n        let filename = filepath.slice(filepath.lastIndexOf('/') + 1)\n        // 分析並還原到原本的位置\n        let fileSystemPath = filepath.slice(filepath.indexOf('/') + 1)\n        fileSystemPath = fileSystemPath.split('/').map((part, i) => {\n          if (i !== 1) {\n            return part\n          }\n          \n          return part.slice(0, part.indexOf(' - ')).trim()\n        }).join('/')\n        // console.log(filename)\n        // console.log(filepath)\n        // console.log(file)\n        await this.db.utils.FileSystemUtils.writeFromFile(fileSystemPath, file, filename)\n      }\n\n    }\n    // Object.keys(zip.files).forEach(function (filename) {\n    //   zip.files[filename].async('string').then(function (fileData) {\n    //     console.log(fileData) // These are your file contents      \n    //   })\n    // })\n    \n  }\n}","import XLSX from 'xlsx'\n\nexport default function (app) {\n\n  app.methods.restoreTimeField = function (value) {\n    if (value !== 0) {\n      value = Date.parse(value)\n    }\n    else if (isNaN(value)) {\n      value = false\n    }\n    return value\n  }\n\n  app.methods.restoreBooleanField = function (value) {\n    if (isNaN(value)) {\n      value = false\n    }\n    else if (value !== 0 && value !== 1) {\n      return value\n    }\n    return (value === 1)\n  }\n\n  app.methods.restoreArrayField = function (value) {\n    return value.split(this.arrayValueSplitor)\n  }\n\n\n  app.methods.loadFileODS = async function (file) {\n    let reader = new FileReader();\n    return new Promise((resolve) => {\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (e) => {\n        var data = new Uint8Array(reader.result);\n        var workbook = XLSX.read(data, {type: \"array\"})\n        // resolve(await this.processXLSXData(workbook))\n        resolve(workbook)\n      }\n    })\n  } \n\n  app.methods.parseConfigurationSheetToJSON = function (xlData) {\n    let output = {}\n\n    for (let i = 0; i < xlData.length; i++) {\n      let row = xlData[i]\n      output[row[0]] = row[1]\n    }\n\n    return output\n  }\n    \n\n  app.methods.parsingWorkbookToJSON = async function (workbook) {\n    \n    var sheet_name_list = workbook.SheetNames;\n\n    let output = {}\n\n    for (let j = 0; j < sheet_name_list.length; j++) {\n      //console.log(url)\n      //console.log(sheet_name_list)\n      let name = sheet_name_list[j]\n      var xlData = XLSX.utils.sheet_to_json(workbook.Sheets[name]);\n\n      let headers\n      \n      for (let len = xlData.length, i = len; i > 0; i--) {\n        let rowIndex = (len - i)\n        let row = xlData[rowIndex]\n        if (!headers) {\n          headers = Object.keys(row)\n        }\n        xlData[rowIndex] = headers.map((header) => {\n          return row[header]\n        })\n        \n        if (i % 10 === 5) {\n          await this.db.utils.AsyncUtils.sleep(0)\n        }\n      }\n      \n      xlData.unshift(headers)\n\n      xlData = await this.db.utils.DataUtils.parseNumber(xlData)\n\n      if (this.arrayJSONAttributes.indexOf(name) > -1) {\n        xlData = await this.arrayToJSON(xlData)\n      }\n      else {\n        xlData = this.parseConfigurationSheetToJSON(xlData)\n      }\n      output[name] = xlData\n    }\n      \n    return output\n  }\n\n  app.methods.arrayToJSON = async function (array) {\n    let key = array[0]\n    let output = []\n    for (let i = 1; i < array.length; i++) {\n      let o = {}\n      key.forEach((k, j) => {\n        let value = array[i][j]\n        \n        if (this.timeFields.indexOf(k) > -1) {\n          value = this.restoreTimeField(value)\n        }\n        if (this.booleanFields.indexOf(k) > -1) {\n          value = this.restoreBooleanField(value)\n        }\n        if (this.arrayFields.indexOf(k) > -1) {\n          value = this.restoreArrayField(value)\n        }\n\n        o[k] = value\n      })\n\n      output.push(o)\n    }\n    return output\n  }\n\n}","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}